////////////////////////////////////////////////////////////////////////////////////////////////////////////
// (C) Gamer Camp / Dave O'Dwyer December 2020 - Module 2
////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "GamerCamp/GameSpecific/GCGameLayerPlatformer.h"
#include "GCObjHazard.h"

#ifndef TINYXML2_INCLUDED
#include "external\tinyxml2\tinyxml2.h"
#endif

#ifndef _GCLEVELLOADER_OGMO_H_
#include "GamerCamp/GCCocosInterface/LevelLoader/GCLevelLoader_Ogmo.h"
#endif

USING_NS_CC;

GCFACTORY_IMPLEMENT_CREATEABLECLASS(CGCObjHazard);

//////////////////////////////////////////////////////////////////////////
// Constructor
//////////////////////////////////////////////////////////////////////////
CGCObjHazard::CGCObjHazard()
	: CGCObjSpritePhysics(GetGCTypeIDOf(CGCObjHazard))
	, m_pCustomCreationParams(nullptr)
	, m_bCanCollide(true)
{
}

//////////////////////////////////////////////////////////////////////////
// This function initialises the Hazard's animation if required.
//////////////////////////////////////////////////////////////////////////
// (Virtual function overriding immediate base class.)
//////////////////////////////////////////////////////////////////////////
void CGCObjHazard::VOnResourceAcquire( void )
{
	
	// Call the base class version first.
	CGCObjSpritePhysics::VOnResourceAcquire();
	   
	// Only initialise if an animation was specified in OGMO.
	if (m_pszAnimation.length() > 0)
	{

		const CGCFactoryCreationParams* const pcCreateParams = GetFactoryCreationParams();
		std::string m_pszPlist = pcCreateParams->strPlistFile;

		// Note m_pszAnimation is sourced from the data file so not set here.
		cocos2d::ValueMap& rdictPList = GCCocosHelpers::CreateDictionaryFromPlist(m_pszPlist);
		pAnimation = GCCocosHelpers::CreateAnimation(rdictPList, m_pszAnimation);
		pAnimation->retain();
		RunAction(GCCocosHelpers::CreateAnimationActionLoop(pAnimation));
	}
}

//////////////////////////////////////////////////////////////////////////
// This function is called by the GC framework when a hazard instance is generated by the object factory.
// The function is overriden here to provide an access point into the OGMO XML data entry row.
// Hazard specific data is read from the XML and placed into member variables.
// Some fields are custom (plist/shape) to the standard creation parameters and these are
// written over the standard fields.
//
//////////////////////////////////////////////////////////////////////////
// (Virtual function overriding immediate base class.)
//////////////////////////////////////////////////////////////////////////
void CGCObjHazard::VHandleFactoryParams(const CGCFactoryCreationParams& rCreationParams, cocos2d::Vec2 v2InitialPosition)
{

	//Fetch a pointer into the OGMO Xml edtior element containing the data.
	const CGCFactoryCreationParams* pParamsToPassToBaseClass = &rCreationParams;
	const tinyxml2::XMLElement* pCurrentObjectXmlData = CGCLevelLoader_Ogmo::GetCurrentObjectXmlData();

	// Read in the custom plist
	if (nullptr != pCurrentObjectXmlData)
	{
		// Animation name	
		const tinyxml2::XMLAttribute* pAnimationName = pCurrentObjectXmlData->FindAttribute("AnimationName");
		CCLOG((nullptr == pAnimationName) ? "AnimationName not found for Hazard!" : pAnimationName->Value());
		m_pszAnimation = pAnimationName->Value();

		// Read in the custom plist and shape fields to overwrite the standard parameter ones.
		const tinyxml2::XMLAttribute* pCustomPlistPath = pCurrentObjectXmlData->FindAttribute("CustomPlist");
		const tinyxml2::XMLAttribute* pCustomShapePath = pCurrentObjectXmlData->FindAttribute("CustomShape");
		
		if ((nullptr != pCustomPlistPath)
			&& (0 != strlen(pCustomPlistPath->Value())))
		{
			m_pCustomCreationParams = std::make_unique< CGCFactoryCreationParams >(rCreationParams.strClassName.c_str(),
				pCustomPlistPath->Value(),
				pCustomShapePath->Value(),
				rCreationParams.eB2dBody_BodyType,
				rCreationParams.bB2dBody_FixedRotation);

			pParamsToPassToBaseClass = m_pCustomCreationParams.get();
		}
	}

	// Call base class version 	
	CGCObjSpritePhysics::VHandleFactoryParams((*pParamsToPassToBaseClass), v2InitialPosition);
}


//////////////////////////////////////////////////////////////////////////
// This function is called when an hazard is resurected from the dead-list to the 
// live list.
// (Virtual function overriding immediate base class.)
//////////////////////////////////////////////////////////////////////////
void CGCObjHazard::VOnResurrected( void )
{
	// Call base class version 	
	CGCObjSpritePhysics::VOnResurrected();

	m_bCanCollide = true;
	GetPhysicsBody()->SetGravityScale( 0.0f );
}

//////////////////////////////////////////////////////////////////////////
// Function to perform any resource releasing tasks.
// (Virtual function overriding immediate base class.)
//////////////////////////////////////////////////////////////////////////
void CGCObjHazard::VOnResourceRelease()
{
	// Call base class version 	
	CGCObjSpritePhysics::VOnResourceRelease();

	// Release the animation only if one was specified from OGMO
	if (m_pszAnimation.length() > 0)
	{
		pAnimation->release();
		pAnimation = nullptr;
	}
}
